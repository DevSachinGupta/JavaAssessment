

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Map.Entry;
import java.util.Set;

import com.google.gson.internal.LinkedTreeMap;
import java.util.List;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map; 

import com.cloudant.client.api.ClientBuilder;
import com.cloudant.client.api.CloudantClient;
import com.cloudant.client.api.Database;
import com.cloudant.client.org.lightcouch.CouchDbException;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

/**
 * Servlet implementation class CloudantServlet
 */
public class Cloudant {
	  private static final long serialVersionUID = 1L;

	    private static CloudantClient client = null;
		private static Database db = null;

		private static String databaseName = "ankitdb";

		private static String user = "9b87c922-804c-48ea-a210-cc884f8a84d4-bluemix";
		private static String password = "35b55f6f226bf6b82426152642c8c7fcca6cc6c46beb4b981b76993d235bd4e2";
	    
	    
	    /**
	     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	     */
	    public static void main(String[] args)
	  {
	       
	            try {
				System.out.println("Connecting to Cloudant : " + user);
			    client = ClientBuilder.account(user)
						.username(user)
						.password(password)
						.build();
						System.out.println("Connecting to Cloudantclient : " + client);
			//	return client;
			        }
			    catch (CouchDbException e) {
				throw new RuntimeException("Unable to connect to repository", e);
			     } 
			
			
	        if (db == null) {
				try {
					db = client.database(databaseName, true);
				
				    
				} catch (Exception e) {
					throw new RuntimeException("DB Not found", e);
				}
			
	            
	        } 
			System.out.println("Database Connection Established Successfully ;"+db);
	    
		
	 JsonObject resultObject = new JsonObject();
			JsonArray jsonArray = new JsonArray();

			if(db!=null) {
				try {
					// get all the document present in database
					List<HashMap> allDocs = db.getAllDocsRequestBuilder().includeDocs(true).build().getResponse()
							.getDocsAs(HashMap.class);

					//if (allDocs.size() == 0) {
						//allDocs = initializeSampleData(db);
					//}

					for (HashMap doc : allDocs) {
						HashMap<String, Object> obj = db.find(HashMap.class, doc.get("_id") + "");
						JsonObject jsonObject = new JsonObject();
						LinkedTreeMap<String, Object> attachments = (LinkedTreeMap<String, Object>) obj.get("_attachments");

						if (attachments != null && attachments.size() > 0) {
							JsonArray attachmentList = getAttachmentList(attachments, obj.get("_id") + "");
							jsonObject.addProperty("id", obj.get("_id") + "");
							jsonObject.addProperty("name", obj.get("name") + "");
							System.out.println("Name  :"+obj.get("name"));
							jsonObject.addProperty("password", obj.get("password") + "");
							jsonObject.add("attachements", attachmentList);

						} else {
							jsonObject.addProperty("id", obj.get("_id") + "");
							jsonObject.addProperty("name", obj.get("name") + "");
							System.out.println("Name 222 :"+obj.get("name"));
							jsonObject.addProperty("password", obj.get("password") + "");
						}

						jsonArray.add(jsonObject);
					}
				} catch (Exception dnfe) {
					System.out.println("Exception thrown : " + dnfe.getMessage());
				}

				resultObject.addProperty("id", "all");
				resultObject.add("body", jsonArray);
				System.out.println("Result Got....::"+resultObject);
			
	    }
	    
	    }
	    private static JsonArray getAttachmentList(LinkedTreeMap<String, Object> attachmentList, String docID) {
			JsonArray attachmentArray = new JsonArray();

			for (Object key : attachmentList.keySet()) {
				LinkedTreeMap<String, Object> attach = (LinkedTreeMap<String, Object>) attachmentList.get(key);

				JsonObject attachedObject = new JsonObject();
				// set the content type of the attachment
				attachedObject.addProperty("content_type", attach.get("content_type").toString());
				// append the document id and attachment key to the URL
				attachedObject.addProperty("url", "attach?id=" + docID + "&key=" + key);
				// set the key of the attachment
				attachedObject.addProperty("key", key + "");

				// add the attachment object to the array
				attachmentArray.add(attachedObject);
			}

			return attachmentArray;
	
		} 
		
	    

	}
